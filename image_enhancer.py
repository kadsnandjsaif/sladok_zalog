#!/usr/bin/env python3
"""
Image Quality Enhancement Tool
–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–∏–∫
"""

import cv2
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter
import argparse
import os
import sys

class ImageEnhancer:
    def __init__(self):
        self.supported_formats = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']
    
    def load_image(self, image_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        ext = os.path.splitext(image_path)[1].lower()
        if ext not in self.supported_formats:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–º–æ—â—å—é PIL
        pil_image = Image.open(image_path).convert('RGB')
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        cv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
        
        return pil_image, cv_image
    
    def denoise_image(self, cv_image, strength=10):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞"""
        return cv2.fastNlMeansDenoisingColored(cv_image, None, strength, strength, 7, 21)
    
    def sharpen_image(self, cv_image, strength=1.5):
        """–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏"""
        kernel = np.array([[-1,-1,-1],
                          [-1, 9,-1],
                          [-1,-1,-1]])
        sharpened = cv2.filter2D(cv_image, -1, kernel)
        return cv2.addWeighted(cv_image, 1-strength+1, sharpened, strength, 0)
    
    def enhance_contrast(self, cv_image, alpha=1.3, beta=10):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —è—Ä–∫–æ—Å—Ç–∏"""
        return cv2.convertScaleAbs(cv_image, alpha=alpha, beta=beta)
    
    def adjust_gamma(self, cv_image, gamma=1.2):
        """–ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è"""
        inv_gamma = 1.0 / gamma
        table = np.array([((i / 255.0) ** inv_gamma) * 255 for i in np.arange(0, 256)]).astype("uint8")
        return cv2.LUT(cv_image, table)
    
    def enhance_colors(self, pil_image, saturation=1.2, vibrance=1.1):
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤"""
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
        enhancer = ImageEnhance.Color(pil_image)
        enhanced = enhancer.enhance(saturation)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HSV
        cv_image = cv2.cvtColor(np.array(enhanced), cv2.COLOR_RGB2BGR)
        hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV).astype(np.float32)
        hsv[:,:,1] *= vibrance  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
        hsv[:,:,1] = np.clip(hsv[:,:,1], 0, 255)
        
        enhanced_cv = cv2.cvtColor(hsv.astype(np.uint8), cv2.COLOR_HSV2BGR)
        return Image.fromarray(cv2.cvtColor(enhanced_cv, cv2.COLOR_BGR2RGB))
    
    def upscale_image(self, cv_image, scale_factor=2):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é EDSR"""
        height, width = cv_image.shape[:2]
        new_width = int(width * scale_factor)
        new_height = int(height * scale_factor)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º INTER_CUBIC –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        upscaled = cv2.resize(cv_image, (new_width, new_height), interpolation=cv2.INTER_CUBIC)
        return upscaled
    
    def apply_unsharp_mask(self, cv_image, sigma=1.0, strength=1.5, threshold=0):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Unsharp Mask –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"""
        blurred = cv2.GaussianBlur(cv_image, (0, 0), sigma)
        sharpened = cv2.addWeighted(cv_image, 1.0 + strength, blurred, -strength, threshold)
        return sharpened
    
    def enhance_image_comprehensive(self, image_path, output_path=None, 
                                  denoise_strength=10, sharpen_strength=1.2,
                                  contrast_alpha=1.2, gamma=1.1, 
                                  saturation=1.15, upscale_factor=1.5):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        pil_image, cv_image = self.load_image(image_path)
        
        print("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        
        # 1. –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞
        print("- –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞...")
        cv_image = self.denoise_image(cv_image, denoise_strength)
        
        # 2. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if upscale_factor > 1:
            print(f"- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ {upscale_factor}x...")
            cv_image = self.upscale_image(cv_image, upscale_factor)
        
        # 3. –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        print("- –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏...")
        cv_image = self.enhance_contrast(cv_image, contrast_alpha)
        
        # 4. –ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        print("- –ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è...")
        cv_image = self.adjust_gamma(cv_image, gamma)
        
        # 5. –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏ —Å Unsharp Mask
        print("- –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏...")
        cv_image = self.apply_unsharp_mask(cv_image, strength=sharpen_strength)
        
        # 6. –£–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        print("- –£–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤...")
        pil_result = Image.fromarray(cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB))
        pil_result = self.enhance_colors(pil_result, saturation)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if output_path is None:
            base_name = os.path.splitext(image_path)[0]
            output_path = f"{base_name}_enhanced.png"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {output_path}")
        pil_result.save(output_path, quality=95, optimize=True)
        
        return output_path

def main():
    parser = argparse.ArgumentParser(description='–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    parser.add_argument('input_image', help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É')
    parser.add_argument('--denoise', type=int, default=10, help='–°–∏–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞ (0-30)')
    parser.add_argument('--sharpen', type=float, default=1.2, help='–°–∏–ª–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏ (0.5-3.0)')
    parser.add_argument('--contrast', type=float, default=1.2, help='–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ (0.5-3.0)')
    parser.add_argument('--gamma', type=float, default=1.1, help='–ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è (0.5-2.0)')
    parser.add_argument('--saturation', type=float, default=1.15, help='–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ (0.5-2.0)')
    parser.add_argument('--upscale', type=float, default=1.5, help='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è (1.0-4.0)')
    
    args = parser.parse_args()
    
    enhancer = ImageEnhancer()
    
    try:
        output_path = enhancer.enhance_image_comprehensive(
            args.input_image,
            args.output,
            args.denoise,
            args.sharpen,
            args.contrast,
            args.gamma,
            args.saturation,
            args.upscale
        )
        print(f"\n‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
        original = Image.open(args.input_image)
        enhanced = Image.open(output_path)
        print(f"üìä –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {original.size}")
        print(f"üìä –†–∞–∑–º–µ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ: {enhanced.size}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()